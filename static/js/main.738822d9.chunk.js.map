{"version":3,"sources":["components/ChatBubble.js","messages.js","App.js","serviceWorker.js","index.js"],"names":["ChatBubble","props","date","className","this","own","content","unix","calendar","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","Component","messages","App","state","currentTime","timeRange","timePercentage","getTimeRange","length","getTimeFromPercentage","time","period","getTimeAsPercentage","timeElapsed","Math","floor","handleTimeChange","event","setState","target","value","parseInt","jumpToMostRecentMessage","chatContainerRef","current","scrollTop","scrollHeight","React","createRef","ref","filter","m","map","index","key","type","min","max","step","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.738822d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Moment from \"react-moment\";\n\nclass ChatBubble extends Component {\n  constructor(props) {\n    super(props);\n    this.date = props.date;\n  }\n\n  render() {\n    const calendarStrings = {\n      lastDay: \"[Yesterday at] LT\",\n      sameDay: \"[Today] LT\",\n      nextDay: \"[Tomorrow at] LT\",\n      lastWeek: \"[last] dddd [at] LT\",\n      nextWeek: \"dddd [at] LT\",\n      sameElse: \"L\",\n    };\n\n    return (\n      <div\n        className={`chat-bubble__wrapper${\n          this.props.own ? \" self-end\" : \" self-start\"\n        }`}\n      >\n        <div\n          className={`chat-bubble${\n            this.props.own ? \" chat-bubble--own\" : \" chat-bubble--theirs\"\n          }`}\n        >\n          <div>{this.props.content}</div>\n        </div>\n        <div\n          className={`date pl-2 text-xs${\n            this.props.own ? \" text-right\" : \" text-left\"\n          }`}\n        >\n          <Moment unix calendar={calendarStrings}>\n            {this.props.date}\n          </Moment>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChatBubble;\n","const messages = [\n  {\n    content: \"Hey\",\n    date: 1593769453,\n    own: true,\n  },\n  {\n    content: \"hey!\",\n    date: 1593769517,\n    own: false,\n  },\n  {\n    content: \"how you doin\",\n    date: 1593769523,\n    own: false,\n  },\n  {\n    content: \"been a while man :)\",\n    date: 1593769554,\n    own: false,\n  },\n  {\n    content: \"yeah pretty good, u?\",\n    date: 1593769755,\n    own: true,\n  },\n  {\n    content: \"all the better for hearing from you ;) what's new?\",\n    date: 1593769780,\n    own: false,\n  },\n  {\n    content: \"haha not much tbh, just doing my thing. Hbu? \",\n    date: 1593769953,\n    own: true,\n  },\n  {\n    content: \"haha what 'thing' is that?\",\n    date: 1593770023,\n    own: false,\n  },\n  {\n    content:\n      \"it's been pretty quiet here actually. working, playing games, playing with myself .. xD\",\n    date: 1593770028,\n    own: false,\n  },\n  {\n    content: \"tmi sorry ðŸ™ˆ\",\n    date: 1593770035,\n    own: false,\n  },\n  {\n    content: \"you there ?\",\n    date: 1593770635,\n    own: false,\n  },\n];\n\nexport default messages;\n","import React from \"react\";\nimport \"./tailwind.generated.css\";\nimport \"./App.css\";\nimport ChatBubble from \"./components/ChatBubble\";\nimport messages from \"./messages.js\";\n\nclass App extends React.Component {\n  state = {\n    currentTime: messages[0].date,\n    timeRange: [0, 100],\n    timePercentage: 100,\n  };\n\n  constructor(props) {\n    super(props);\n    this.chatContainerRef = React.createRef();\n  }\n\n  getTimeRange = () => {\n    return [messages[0].date, messages[messages.length - 1].date];\n  };\n\n  // Take a percentage value, and return a unix timestamp\n  getTimeFromPercentage = (time) => {\n    const timeRange = this.state.timeRange;\n    const period = timeRange[1] - timeRange[0];\n    return timeRange[0] + period * (time / 100);\n  };\n\n  // Take a unix timestamp, and return as a percentage of the total range\n  getTimeAsPercentage = (time, timeRange = false) => {\n    timeRange = timeRange ? timeRange : this.state.timeRange;\n    const period = timeRange[1] - timeRange[0];\n    const timeElapsed = time - timeRange[0];\n    return Math.floor(((timeElapsed > 0 ? timeElapsed : 1) / period) * 100);\n  };\n\n  handleTimeChange = (event) => {\n    this.setState({\n      currentTime: this.getTimeFromPercentage(event.target.value),\n      timePercentage: parseInt(event.target.value),\n    });\n\n    // Jump to msot recent messages\n    this.jumpToMostRecentMessage();\n  };\n\n  componentDidMount() {\n    const timeRange = this.getTimeRange();\n    this.setState({\n      timeRange: timeRange,\n      timePercentage: this.getTimeAsPercentage(\n        this.state.currentTime,\n        timeRange\n      ),\n    });\n    this.jumpToMostRecentMessage();\n  }\n\n  jumpToMostRecentMessage = () => {\n    // Jump to latest messages\n    this.chatContainerRef.current.scrollTop = this.chatContainerRef.current.scrollHeight;\n  };\n\n  render() {\n    return (\n      <div className=\"App flex flex-col sm:flex-row\">\n        <div\n          className=\"chat-container flex-grow sm:mr-auto\"\n          ref={this.chatContainerRef}\n        >\n          <div className=\"flex flex-col flex-grow\">\n            {messages\n              .filter((m) => m.date <= this.state.currentTime)\n              .map((m, index) => (\n                <ChatBubble\n                  content={m.content}\n                  date={m.date}\n                  own={m.own}\n                  key={index}\n                />\n              ))}\n          </div>\n        </div>\n        <div className=\"range flex-grow-0 flex-shrink-0 sm:flex-grow flex p-10 items-center justify-center\">\n          <div className=\"self-center w-full\">\n            <input\n              className=\"w-full basis-full\"\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              step=\"4\"\n              onChange={this.handleTimeChange}\n              value={this.state.timePercentage}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}